@page "/folder/{FolderId}/item/{FolderItemId}"

@using Microsoft.AspNetCore.Authorization
@using PictureAnalyzer.Common
@using PictureAnalyzer.Common.Enumerations

@inject PictureAnalyzer.Client.Services.API API
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager _navigationManager
@inject IToastService _toastService
@inject IModalService _modalService
@inject SpinnerService _spinnerService


@if(SelectedFolderItem != null && SelectedFolderItem.ItemUri != null)
{
    <div class="mb-3">
        <NavLink href="@($"folder/{FolderId}")">
            &#171; Back to "@SelectedFolderItem.FolderName"
        </NavLink>
    </div>
    
    <div class="row">
        <div class="col-md-6">
            <img src="@(SelectedFolderItem.ItemUri)" class="imageWidth" />
        </div>
        <div class="col-md-6">
            <div class="row">
                <div class="input-group">
                    <input type="text" @bind="@SelectedFolderItem.PrettyFileName" class="form-control" placeholder="File Name">
                    <button class="btn btn-outline-secondary" type="button" @onclick="FolderItemUpdate">Update</button>
                </div> 
            </div>
            <div class="row mt-2">
                <span><strong>Size: </strong>@SelectedFolderItem.FileSize.BytesToString()</span>
            </div>
            <div class="row mt-2">
                <div class="col-md-12">
                    @if (SelectedFolderItem.ImageRatings != null)
                    {
                        @if (SelectedFolderItem.ImageRatings.AdultScore > 0.25)
                        {
                            <span class="badge rounded-pill bg-danger me-1">Adult</span>
                            <input type="hidden" @bind="SelectedFolderItem.ImageRatings.AdultScore" />
                        }
                        @if (SelectedFolderItem.ImageRatings.RacyScore > 0.25)
                        {
                            <span class="badge rounded-pill bg-danger me-1">Racy</span>
                            <input type="hidden" @bind="SelectedFolderItem.ImageRatings.RacyScore" />
                        }
                        @if (SelectedFolderItem.ImageRatings.GoreScore > 0.25)
                        {
                            <span class="badge rounded-pill bg-danger me-1">Gore</span>
                            <input type="hidden" @bind="SelectedFolderItem.ImageRatings.GoreScore" />
                        }
                    }

                    @foreach(var tag in SelectedFolderItem.ImageTags)
                    {
                        <span class="badge rounded-pill bg-dark me-1" @onclick="(() => FolderItemDeleteTagById(tag.Id))">@tag.Tag<i class="fas fa-times ms-1 pointer"></i></span>
                    }
                </div>
                <div class="col-md-3 mt-2">
                    <div class="input-group input-group-sm">
                        <input type="text" class="form-control" @bind="NewImageTag.Tag" placeholder="New Tag" id="inputGroup-sizing-sm">
                        <button class="btn btn-outline-secondary" type="button" @onclick="FolderItemAddImageTag"><i class="fas fa-plus"></i></button>
                    </div>                  
                </div>
            </div>
            <div class="row mt-2">
                <div class="col-md-12">
                    <div class="btn btn-danger float-end" @onclick="FolderItemDelete">Delete</div>
                </div>
            </div>
        </div>
    </div>

}

@code {
    [Parameter]
    public string FolderId { get; set; }
    
    [Parameter]
    public string FolderItemId { get; set; }
    private Common.FolderItem SelectedFolderItem { get; set; }
    private Common.ImageTag NewImageTag { get; set; } = new Common.ImageTag();


    protected override async Task OnParametersSetAsync()
    {
        //Load the folder details
        if (!string.IsNullOrEmpty(FolderId) && !string.IsNullOrEmpty(FolderItemId))
        {
            SelectedFolderItem = await API.FolderItemGetById(FolderId, FolderItemId);
        }
    }

    async private Task FolderItemUpdate()
    {
        await API.FolderItemUpdateById(SelectedFolderItem, FolderId, FolderItemId);
    }

    async private Task FolderItemDelete()
    {
        var modal = _modalService.Show<ConfirmDialog>("Are you sure you want to delete this item?");
        var modalResult = await modal.Result;

        if (modalResult.Cancelled) { }
        else
        {
            await API.FolderItemDeleteById(FolderId, FolderItemId);
            _navigationManager.NavigateTo($"folder/{FolderId}");
        }
    }

    async private Task FolderItemAddImageTag()
    {
        var result = await API.FolderItemAddTabById(NewImageTag, FolderId, FolderItemId);
        if(result != null)
        {
            SelectedFolderItem.ImageTags.Add(result);
            NewImageTag = new ImageTag();
        }
        else
        {
            _toastService.ShowError("Failed to add tag");
        }
    }

    async private Task FolderItemDeleteTagById(string tagId)
    {
        var result = await API.FolderItemDeleteTagById(FolderId, FolderItemId, tagId);
        if(result)
        {
            SelectedFolderItem.ImageTags.RemoveAll(x => x.Id == tagId);
        }
        else
        {
            _toastService.ShowError("Failed to delete tag");
        }
    }
}
