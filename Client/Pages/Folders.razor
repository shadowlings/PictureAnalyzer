@page "/folders"

@using PictureAnalyzer.Common
@using PictureAnalyzer.Common.Enumerations

@inject NavigationManager _navigationManger
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject PictureAnalyzer.Client.Services.API API

@attribute [Authorize]

<div class="row">
    <div class="col-md-12">
        <a href="@($"/folder")" class="btn btn-success float-end"><i class="fas fa-plus me-2"></i>Add Folder</a>
    </div>
</div>

<div class="row mt-3">
    <div class="col-md-12">
        <form class="input-group float-end" @onsubmit="(() => SearchFolders(0, false))">
            <input type="text" class="form-control" aria-label="Text input with dropdown button" @bind="Search.FilterText" />
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="submit"><i class="fas fa-search me-2"></i>Search</button>
            </div>
        </form>
    </div>
</div>
<div class="row mt-1">
    <div class="col-md-12">
        <div class="btn btn-link btn-sm float-end pointer" @onclick="(() => SearchFolders(0, true))">Reset Search</div>
    </div>
</div>
<div class="row mt-3">
    <div class="col-md-12">
        <nav aria-label="Page navigation example">
            <ul class="pagination float-end">
                @if ((Search.Page + 1) > 1)
                {
                    <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchFolders(Search.Page - 1, false))">Previous</div></li>
                }
                <li class="page-item"><div class="page-link">Page @(TotalFound == 0 ? 0 : (Search.Page + 1)) of @(Math.Ceiling((double)TotalFound / PageSize))</div></li>
                @if ((Search.Page + 1) < (Math.Ceiling((double)TotalFound / PageSize)))
                {
                    <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchFolders(Search.Page + 1, false))">Next</div></li>
                }
            </ul>
        </nav>
    </div>
</div>
<div class="row">
    <div class="col-md-12 table-responsive">
        <table class="table table-sm table-hover">
            <thead>
                <tr>
                    <th width="50%" scope="col" @onclick="(() => Sort(nameof(Common.Folder.Name)))" class="pointer">
                        Name
                        @if (Search.SortBy == nameof(Common.Folder.Name))
                        {
                            @if (Search.SortDirection == SortDirection.Ascending)
                            {
                                <i class="fas fa-angle-down"></i>
                            }
                            else if (Search.SortDirection == SortDirection.Descending)
                            {
                                <i class="fas fa-angle-up"></i>
                            }
                        }
                    </th>
                    <th width="25%" scope="col" @onclick="(() => Sort(nameof(Common.Folder.TotalSize)))" class="pointer">
                        Size
                        @if (Search.SortBy == nameof(Common.Folder.TotalSize))
                        {
                            @if (Search.SortDirection == SortDirection.Ascending)
                            {
                                <i class="fas fa-angle-down"></i>
                            }
                            else if (Search.SortDirection == SortDirection.Descending)
                            {
                                <i class="fas fa-angle-up"></i>
                            }
                        }
                    </th>
                    <th width="25%" scope="col" @onclick="(() => Sort(nameof(Common.Folder.ItemCount)))" class="pointer">
                        Files
                        @if (Search.SortBy == nameof(Common.Folder.ItemCount))
                        {
                            @if (Search.SortDirection == SortDirection.Ascending)
                            {
                                <i class="fas fa-angle-down"></i>
                            }
                            else if (Search.SortDirection == SortDirection.Descending)
                            {
                                <i class="fas fa-angle-up"></i>
                            }
                        }
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Items)
                {
                    <tr class="pointer">
                        <td>
                            <div class="btn btn-link" @onclick="(() => SelectFolder(item.Id))">@item.Name</div>
                        </td>
                        <td>
                            <div class="mt-2">@item.TotalSize.BytesToString()</div>
                        </td>
                        <td>
                            <div class="mt-2">@item.ItemCount</div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <nav aria-label="Page navigation example">
            <ul class="pagination float-end">
                @if ((Search.Page + 1) > 1)
                {
                    <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchFolders(Search.Page - 1, false))">Previous</div></li>
                }
                <li class="page-item"><div class="page-link">Page @(TotalFound == 0 ? 0 : (Search.Page + 1)) of @(Math.Ceiling((double)TotalFound / PageSize))</div></li>
                @if ((Search.Page + 1) < (Math.Ceiling((double)TotalFound / PageSize)))
                {
                    <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchFolders(Search.Page + 1, false))">Next</div></li>
                }
            </ul>
        </nav>
    </div>
</div>
<div class="row mt-1">
    <div class="col-md-12">
        <label class="float-end search-found">Found @TotalFound.ToString("N0")</label>
    </div>
</div>

@code {
    private Search Search { get; set; } = new Search();
    int PageSize { get; set; } = 15;

    List<Common.Folder> Items = new List<Common.Folder>();
    int TotalFound { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var cachedSearch = await localStorage.GetItemAsync<Search>("FolderSearch");
        if (cachedSearch == null)
        {
            await SearchFolders(0, true);
        }
        else
        {
            Search = cachedSearch;
            await SearchFolders(Search.Page, false);
        }
    }

    async private Task SearchFolders(int? page, bool reset)
    {
        if (reset == true)
        {
            Search = new Search();
            Search.SortBy = nameof(PictureAnalyzer.Common.Folder.Name);
            page = null;
        }

        Search = new Search()
        {
            FilterText = string.IsNullOrEmpty(Search?.FilterText) ? null : Search?.FilterText,
            Page = page == null ? Search.Page : (int)page,
            PageSize = PageSize,
            SortBy = Search.SortBy,
            SortDirection = Search.SortDirection
        };

        await localStorage.SetItemAsync("FolderSearch", Search);

        var response = await API.FolderSearch(Search);
        Items = response.Data;
        TotalFound = response.Total;
    }

    async private Task Sort(string column)
    {
        Search.SortBy = column;
        Search.SortDirection = Search.SortDirection == SortDirection.Ascending ? SortDirection.Descending : SortDirection.Ascending;

        await SearchFolders(Search.Page, false);
    }

    private void SelectFolder(string folderId)
    {
        _navigationManger.NavigateTo($"folder/{folderId}");
    }
}