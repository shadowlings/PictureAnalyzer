@page "/folder"
@page "/folder/{FolderId}/settings"

@using Microsoft.AspNetCore.Authorization
@using PictureAnalyzer.Common

@inject PictureAnalyzer.Client.Services.API API
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject NavigationManager _navigationManager
@inject IToastService _toastService
@inject IModalService _modalService

@if(SelectedFolder != null)
{
    @if (!string.IsNullOrEmpty(FolderId))
    {
        <div class="mb-3">
            <NavLink href="@($"folder/{FolderId}")">
                &#171; Back to "@SelectedFolder.Name"
            </NavLink>
        </div>
    }

    <div class="col-md-12">
        <div class="col-md-6">
            <div class="row">
                <div class="input-group input-group-lg">
                    <input type="text" class="form-control" @bind="SelectedFolder.Name" placeholder="Folder Name" aria-label="Name" aria-describedby="button-addon2" />
                    <button class="btn btn-outline-dark" type="button" id="button-addon2" @onclick="SaveFolderName">Save Folder Name</button>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(FolderId))
    {
        <div class="col-md-12">
            <h3 class="mb-2 text-muted mt-3">Manage Authorized Users/Owners</h3>
            <p>
                Add or remove users who should have access to this folder. Add the email address of the user - be sure to spell it correctly.
            </p>
            <div class="col-md-6">
                <div class="row">
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" @bind="NewAuthorizedUser.Email" placeholder="User's Email Address" aria-label="User's Email Address" aria-describedby="button-addon2" />
                        <button class="btn btn-success" type="button" id="button-addon2" @onclick="AddAuthorizedUser">Add User</button>
                    </div>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Email Address</th>
                            <th scope="col"></th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in SelectedFolder.AuthorizedUsers)
                        {
                            <tr>
                                <td scope="row">@user.Email</td>
                                @if (!user.IsSelf)
                                {
                                    <td>
                                        <div class="form-check form-switch">
                                            <input type="checkbox" class="form-check-input" id="@($"authorized_allowedit_{@user.Email}")" checked="@(user.AllowEdit ? "checked" : null )" @onchange="(() => ToggleAllowEdit(user))" />
                                            <label class="form-check-label" for="@($"authorized_allowedit_{@user.Email}")">Allow Edit</label>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="btn btn-danger btn-xs" @onclick="(() => RemoveAuthorizedUser(user))"><i class="fas fa-trash-alt"></i></div>
                                    </td>
                                }
                                else
                                {
                                    <td></td>
                                    <td></td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="col-md-4">
            <h3 class="mb-2 text-muted mt-3">Delete Folder</h3>
            <p>
                This will delete the Folder and all associated data. This action cannot be undone! Your account will remain active, but the Folder will be deleted.
            </p>
            <div class="mt-1">
                <input type="button" class="btn btn-danger" value="Delete Folder" @onclick="DeleteFolder" />
            </div>
        </div>
    }
}

@code {

    [Parameter]
    public string FolderId { get; set; }
    private PictureAnalyzer.Common.Folder SelectedFolder { get; set; }
    private AuthorizedUser NewAuthorizedUser { get; set; } = new AuthorizedUser();

    async protected override Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(FolderId))
        {
            SelectedFolder = await API.FolderSettingsGetById(FolderId);
        }
        else
        {
            SelectedFolder = new PictureAnalyzer.Common.Folder();
        }
    }

    public async Task SaveFolderName()
    {
        if (string.IsNullOrEmpty(FolderId))
        {
            var newFolderId = await API.FolderCreate(SelectedFolder);
            _navigationManager.NavigateTo($"/folder/{newFolderId}");
        }
        else
        {
            await API.FolderUpdate(SelectedFolder, FolderId);
            _toastService.ShowSuccess("Folder Updated");
        }
    }

    public async Task DeleteFolder()
    {
        var modal = _modalService.Show<ConfirmDialog>("Are you sure you want to delete this folder?");
        var modalResult = await modal.Result;

        if (modalResult.Cancelled) { }
        else
        {
            await API.FolderDelete(FolderId);
            _toastService.ShowSuccess("Deleted Folder. Redirecting...");
            _navigationManager.NavigateTo("/folders");
        }
    }

    public async Task AddAuthorizedUser()
    {
        var response = await API.FolderAddAuthorizedUser(NewAuthorizedUser, FolderId);
        SelectedFolder = await API.FolderSettingsGetById(FolderId);
        NewAuthorizedUser = new AuthorizedUser();
    }

    public async Task RemoveAuthorizedUser(AuthorizedUser user)
    {
        var modal = _modalService.Show<ConfirmDialog>("Are you sure you want to delete this authorized user?");
        var modalResult = await modal.Result;

        if (modalResult.Cancelled) { }
        else
        {
            await API.FolderDeleteAuthorizedUser(FolderId, user.Id);
            SelectedFolder = await API.FolderSettingsGetById(FolderId);
        }
    }

    public async Task ToggleAllowEdit(AuthorizedUser user)
    {
        user = await API.FolderToggleAllowEdit(FolderId, user.Id);
    }
}